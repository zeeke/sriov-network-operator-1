// Code generated by MockGen. DO NOT EDIT.
// Source: openshift.go

// Package mock_openshift is a generated GoMock package.
package mock_openshift

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openshift "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/platforms/openshift"
	versioned "github.com/openshift/machine-config-operator/pkg/generated/clientset/versioned"
)

// MockOpenshiftContextInterface is a mock of OpenshiftContextInterface interface.
type MockOpenshiftContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOpenshiftContextInterfaceMockRecorder
}

// MockOpenshiftContextInterfaceMockRecorder is the mock recorder for MockOpenshiftContextInterface.
type MockOpenshiftContextInterfaceMockRecorder struct {
	mock *MockOpenshiftContextInterface
}

// NewMockOpenshiftContextInterface creates a new mock instance.
func NewMockOpenshiftContextInterface(ctrl *gomock.Controller) *MockOpenshiftContextInterface {
	mock := &MockOpenshiftContextInterface{ctrl: ctrl}
	mock.recorder = &MockOpenshiftContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenshiftContextInterface) EXPECT() *MockOpenshiftContextInterfaceMockRecorder {
	return m.recorder
}

// GetFlavor mocks base method.
func (m *MockOpenshiftContextInterface) GetFlavor() openshift.OpenshiftFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavor")
	ret0, _ := ret[0].(openshift.OpenshiftFlavor)
	return ret0
}

// GetFlavor indicates an expected call of GetFlavor.
func (mr *MockOpenshiftContextInterfaceMockRecorder) GetFlavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavor", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).GetFlavor))
}

// GetMcClient mocks base method.
func (m *MockOpenshiftContextInterface) GetMcClient() versioned.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMcClient")
	ret0, _ := ret[0].(versioned.Interface)
	return ret0
}

// GetMcClient indicates an expected call of GetMcClient.
func (mr *MockOpenshiftContextInterfaceMockRecorder) GetMcClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMcClient", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).GetMcClient))
}

// IsHypershift mocks base method.
func (m *MockOpenshiftContextInterface) IsHypershift() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHypershift")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHypershift indicates an expected call of IsHypershift.
func (mr *MockOpenshiftContextInterfaceMockRecorder) IsHypershift() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHypershift", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).IsHypershift))
}

// IsOpenshiftCluster mocks base method.
func (m *MockOpenshiftContextInterface) IsOpenshiftCluster() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpenshiftCluster")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpenshiftCluster indicates an expected call of IsOpenshiftCluster.
func (mr *MockOpenshiftContextInterfaceMockRecorder) IsOpenshiftCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpenshiftCluster", reflect.TypeOf((*MockOpenshiftContextInterface)(nil).IsOpenshiftCluster))
}
