// Code generated by MockGen. DO NOT EDIT.
// Source: platforms.go

// Package mock_platforms is a generated GoMock package.
package mock_platforms

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/k8snetworkplumbingwg/sriov-network-operator/api/v1"
	openshift "github.com/k8snetworkplumbingwg/sriov-network-operator/pkg/platforms/openshift"
	versioned "github.com/openshift/machine-config-operator/pkg/generated/clientset/versioned"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CreateOpenstackDevicesInfo mocks base method.
func (m *MockInterface) CreateOpenstackDevicesInfo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOpenstackDevicesInfo")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOpenstackDevicesInfo indicates an expected call of CreateOpenstackDevicesInfo.
func (mr *MockInterfaceMockRecorder) CreateOpenstackDevicesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOpenstackDevicesInfo", reflect.TypeOf((*MockInterface)(nil).CreateOpenstackDevicesInfo))
}

// CreateOpenstackDevicesInfoFromNodeStatus mocks base method.
func (m *MockInterface) CreateOpenstackDevicesInfoFromNodeStatus(arg0 *v1.SriovNetworkNodeState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateOpenstackDevicesInfoFromNodeStatus", arg0)
}

// CreateOpenstackDevicesInfoFromNodeStatus indicates an expected call of CreateOpenstackDevicesInfoFromNodeStatus.
func (mr *MockInterfaceMockRecorder) CreateOpenstackDevicesInfoFromNodeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOpenstackDevicesInfoFromNodeStatus", reflect.TypeOf((*MockInterface)(nil).CreateOpenstackDevicesInfoFromNodeStatus), arg0)
}

// DiscoverSriovDevicesVirtual mocks base method.
func (m *MockInterface) DiscoverSriovDevicesVirtual() ([]v1.InterfaceExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSriovDevicesVirtual")
	ret0, _ := ret[0].([]v1.InterfaceExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSriovDevicesVirtual indicates an expected call of DiscoverSriovDevicesVirtual.
func (mr *MockInterfaceMockRecorder) DiscoverSriovDevicesVirtual() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSriovDevicesVirtual", reflect.TypeOf((*MockInterface)(nil).DiscoverSriovDevicesVirtual))
}

// GetFlavor mocks base method.
func (m *MockInterface) GetFlavor() openshift.OpenshiftFlavor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavor")
	ret0, _ := ret[0].(openshift.OpenshiftFlavor)
	return ret0
}

// GetFlavor indicates an expected call of GetFlavor.
func (mr *MockInterfaceMockRecorder) GetFlavor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavor", reflect.TypeOf((*MockInterface)(nil).GetFlavor))
}

// GetMcClient mocks base method.
func (m *MockInterface) GetMcClient() versioned.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMcClient")
	ret0, _ := ret[0].(versioned.Interface)
	return ret0
}

// GetMcClient indicates an expected call of GetMcClient.
func (mr *MockInterfaceMockRecorder) GetMcClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMcClient", reflect.TypeOf((*MockInterface)(nil).GetMcClient))
}

// IsHypershift mocks base method.
func (m *MockInterface) IsHypershift() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHypershift")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHypershift indicates an expected call of IsHypershift.
func (mr *MockInterfaceMockRecorder) IsHypershift() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHypershift", reflect.TypeOf((*MockInterface)(nil).IsHypershift))
}

// IsOpenshiftCluster mocks base method.
func (m *MockInterface) IsOpenshiftCluster() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpenshiftCluster")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpenshiftCluster indicates an expected call of IsOpenshiftCluster.
func (mr *MockInterfaceMockRecorder) IsOpenshiftCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpenshiftCluster", reflect.TypeOf((*MockInterface)(nil).IsOpenshiftCluster))
}
